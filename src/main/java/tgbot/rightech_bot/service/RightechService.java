package tgbot.rightech_bot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import tgbot.rightech_bot.config.RightechConfig;

import java.util.ArrayList;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class RightechService {
    private final RightechConfig rightechConfig;
    private final RestTemplate restTemplate = new RestTemplate();
    private static final int MAX_MESSAGE_LENGTH = 1000; // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
    private static final int MAX_DEVICES_PER_MESSAGE = 3; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    private static final String MODEL_ID = "682304b420b46dbb6c1f6af6"; // ID –º–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

    private HttpHeaders createHeaders() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + rightechConfig.getToken());
        headers.set("Content-Type", "application/json");
        log.debug("Created headers: {}", headers);
        return headers;
    }


    public String turnLightOn(String lightId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ–º–∞–Ω–¥
            String url = rightechConfig.getApiUrl() + "/v1/objects/" + lightId + "/commands/ON";
            log.info("Making POST request to URL: {}", url);
            log.debug("Full request details:");
            log.debug("URL: {}", url);
            log.debug("Method: POST");
            log.debug("Headers: {}", createHeaders());
            
            JSONObject command = new JSONObject();
            command.put("brightness", 100);
            log.debug("Request body: {}", command.toString());

            HttpEntity<String> entity = new HttpEntity<>(command.toString(), createHeaders());
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
            
            log.debug("Response status: {}", response.getStatusCode());
            log.debug("Response headers: {}", response.getHeaders());
            log.debug("Response body: {}", response.getBody());
            
            if (response.getStatusCode().is2xxSuccessful()) {
                // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                Thread.sleep(1000);
                return "–§–æ–Ω–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω –Ω–∞ 100% —è—Ä–∫–æ—Å—Ç–∏\n\n" + getDeviceStatus(lightId);
            } else {
                JSONObject errorResponse = new JSONObject(response.getBody());
                String errorMessage = "–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä—è: ";
                errorMessage += errorResponse.optString("message", response.getBody());
                log.error("Error response from API: {}", response.getBody());
                return errorMessage;
            }
        } catch (Exception e) {
            log.error("Error turning light on. Full request details:", e);
            log.error("URL: {}", rightechConfig.getApiUrl() + "/v1/objects/" + lightId + "/commands/ON");
            log.error("Headers: {}", createHeaders());
            return "–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä—è: " + e.getMessage();
        }
    }

    public String turnLightOff(String lightId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ–º–∞–Ω–¥
            String url = rightechConfig.getApiUrl() + "/v1/objects/" + lightId + "/commands/OFF";
            log.info("Making POST request to URL: {}", url);
            log.debug("Full request details:");
            log.debug("URL: {}", url);
            log.debug("Method: POST");
            log.debug("Headers: {}", createHeaders());
            
            JSONObject command = new JSONObject();
            log.debug("Request body: {}", command.toString());

            HttpEntity<String> entity = new HttpEntity<>(command.toString(), createHeaders());
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
            
            log.debug("Response status: {}", response.getStatusCode());
            log.debug("Response headers: {}", response.getHeaders());
            log.debug("Response body: {}", response.getBody());
            
            if (response.getStatusCode().is2xxSuccessful()) {
                // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                Thread.sleep(1000);
                return "–§–æ–Ω–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω\n\n" + getDeviceStatus(lightId);
            } else {
                JSONObject errorResponse = new JSONObject(response.getBody());
                String errorMessage = "–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä—è: ";
                errorMessage += errorResponse.optString("message", response.getBody());
                log.error("Error response from API: {}", response.getBody());
                return errorMessage;
            }
        } catch (Exception e) {
            log.error("Error turning light off. Full request details:", e);
            log.error("URL: {}", rightechConfig.getApiUrl() + "/v1/objects/" + lightId + "/commands/OFF");
            log.error("Headers: {}", createHeaders());
            return "–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä—è: " + e.getMessage();
        }
    }

    public String getDeviceStatus(String lightId) {
        try {
            String url = rightechConfig.getApiUrl() + "/v1/objects/" + lightId;
            log.info("Getting device status. URL: {}", url);
            
            HttpEntity<String> entity = new HttpEntity<>(createHeaders());
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                JSONObject object = new JSONObject(response.getBody());
                StringBuilder status = new StringBuilder();
                
                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                status.append("üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:\n");
                status.append(String.format("ID: %s\n", object.optString("id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")));
                status.append(String.format("–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", object.optString("name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")));
                status.append(String.format("–ê–∫—Ç–∏–≤–Ω–æ: %s\n", object.optBoolean("active", false) ? "‚úÖ" : "‚ùå"));
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                if (object.has("state")) {
                    JSONObject state = object.getJSONObject("state");
                    boolean isOnline = state.optBoolean("online", false);
                    long lastUpdateTime = state.optLong("time", 0);
                    long currentTime = System.currentTimeMillis();
                    long timeDiff = currentTime - lastUpdateTime;
                    
                    log.info("Device state: online={}, lastUpdate={}, timeDiff={}ms", 
                            isOnline, new java.util.Date(lastUpdateTime), timeDiff);
                    
                    status.append(String.format("–°—Ç–∞—Ç—É—Å: %s\n", isOnline ? "üü¢ –æ–Ω–ª–∞–π–Ω" : "üî¥ –æ—Ñ–ª–∞–π–Ω"));
                    
                    if (state.has("payload")) {
                        try {
                            String payloadStr = state.getString("payload");
                            log.debug("Raw payload: {}", payloadStr);
                            
                            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã payload
                            JSONObject payload;
                            try {
                                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
                                payload = new JSONObject(payloadStr);
                            } catch (Exception e) {
                                try {
                                    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
                                    payload = new JSONObject();
                                    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
                                    String[] pairs = payloadStr.replace("{", "").replace("}", "").split(",");
                                    for (String pair : pairs) {
                                        String[] keyValue = pair.split(":");
                                        if (keyValue.length == 2) {
                                            String key = keyValue[0].trim();
                                            String value = keyValue[1].trim();
                                            // –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                                            try {
                                                if (value.contains(".")) {
                                                    payload.put(key, Double.parseDouble(value));
                                                } else {
                                                    payload.put(key, Integer.parseInt(value));
                                                }
                                            } catch (NumberFormatException nfe) {
                                                // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                                                payload.put(key, value);
                                            }
                                        }
                                    }
                                } catch (Exception e2) {
                                    log.error("Failed to parse payload in both formats: {}", e2.getMessage());
                                    throw e2;
                                }
                            }
                            
//                            status.append("\nüí° –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ–Ω–∞—Ä—è:\n");
//
//                            // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∞–º–ø—ã
//                            if (payload.has("brightness")) {
//                                status.append(String.format("–Ø—Ä–∫–æ—Å—Ç—å: %d%%\n", payload.optInt("brightness", 0)));
//                            }
//                            if (payload.has("lux")) {
//                                status.append(String.format("–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: %d lux\n", payload.optInt("lux", 0)));
//                            }
//                            if (payload.has("lamp_life")) {
//                                status.append(String.format("–†–µ—Å—É—Ä—Å –ª–∞–º–ø—ã: %.2f —á–∞—Å–æ–≤\n", payload.optDouble("lamp_life", 0.0)));
//                            }
//                            if (payload.has("power")) {
//                                status.append(String.format("–ü–∏—Ç–∞–Ω–∏–µ: %s\n", payload.optBoolean("power", false) ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"));
//                            }
//                            if (payload.has("motion")) {
//                                status.append(String.format("–î–≤–∏–∂–µ–Ω–∏–µ: %s\n", payload.optBoolean("motion", false) ? "–µ—Å—Ç—å" : "–Ω–µ—Ç"));
//                            }
                            
                        } catch (Exception e) {
                            log.error("Error parsing state payload: {} for payload: {}", e.getMessage(), state.optString("payload"));
                            status.append("\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: ").append(e.getMessage());
                        }
                    }
                } else {
                    status.append("–°—Ç–∞—Ç—É—Å: üî¥ –æ—Ñ–ª–∞–π–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)\n");
                }
                
                return status.toString();
            } else {
                log.error("Failed to get device status. Response: {}", response.getBody());
                return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: " + response.getBody();
            }
        } catch (Exception e) {
            log.error("Error getting device status: {}", e.getMessage());
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: " + e.getMessage();
        }
    }
} 